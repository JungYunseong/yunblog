---
layout: post
title:  Text
date:   2022-04-24 15:01:35 +0300
image:  '/images/post/text.jpg'
tags:   [SwiftUI, Development]
---
# Text

```swift
Text("Hellow!")
	.font(.title)
```

IOS의 기본폰트는 SF Pro이며, Text View에 기본으로 적용된 서식값은

- size = 17
- weight = .regular
- design = .default

이다.

### Font Style의 종류

font에는 TextStyle이 있는데, size와 weight를 이용해 용도별로 Style이름을 붙여준 것이다.

```swift
.font(.largeTitle) = .font(.system(size: 34, weight: .regular))
.font(.title) = .font(.system(size: 28, weight: .regular))
.font(.title2) = .font(.system(size: 22, weight: .regular))
.font(.title3) = .font(.system(size: 20, weight: .regular))
.font(.headline) = .font(.system(size: 17, weight: .semibold))
.font(.body) = .font(.system(size: 17, weight: .regular))
.font(.callout) = .font(.system(size: 16, weight: .regular))
.font(.subheadline) = .font(.system(size: 15, weight: .regular))
.font(.footnote) = .font(.system(size: 13, weight: .regular))
.font(.caption) = .font(.system(size: 12, weight: .regular))
.font(.caption2) = .font(.system(size: 11, weight: .regular))
```

SwiftUI에는 총 11가지 TextStyle이 있다.

기획을 하다보면 이미 설정된 TextStyle보다는 직접 font size를 커스텀 하는 경우가 있는데

```swift
.font(.system(size: ##))
```

코드를 활용해 직접 폰트 사이즈를 커스텀할 수 있다.

또 Font.Design과 함께 사용해서 용도별 style에 디자인을 줄 수있다.

```swift
.font(.system(style: Font.TextStyle, design: Font.Design))
```

### Font Weight의 종류

```swift
.fontWeight(.ultraLight)
.fontWeight(.thin)
.fontWeight(.light)
.fontWeight(.regular)
.fontWeight(.medium)
.fontWeight(.semibold)
.fontWeight(.bold)
.fontWeight(.heavy)
.fontWeight(.black)
```

SwiftUI에서는 9가지의 weight를 제공하고 있다.

### Font Design의 종류

```swift
.font(.system(size: ##, design: .default))
.font(.system(size: ##, design: .monospaced))
.font(.system(size: ##, design: .rounded))
.font(.system(size: ##, design: .serif))
```

Font Design은 한글에는 적용되지않고, 영문에만적용된다.

rounded는 default의 서체의 모서리를 round 처리한 서식이다.

### System Font 변경

기본으로 적용된 ‘SF Pro’ 시스템 폰트에서 벗어나 Custom Fonts를 사용하고 싶다면

```swift
.font(.custom("name-of-font", size: 17))

ex)
.font(.custom("Al Nile", size: 20))
```

코드를 활용해 시스템 폰트를 변경할 수 있다

적용가능한 Custom Font 항목들은 아래 공식 문서에 리스트업 되어있다.

<iframe src="https://developer.apple.com/fonts/system-fonts/#document](https://developer.apple.com/fonts/system-fonts/#document"></iframe>

### 이외 Text View에 적용할 수 있는 Function

- 글자 색 변경

```swift
.foregroundColor(Color.blue)
```

- 배경 색 변경

```swift
.background(Color.blue)
```

- 볼드 처리

```swift
.bold()
```

- 기울임 처리

```swift
.italic()
```

- 취소선 처리

```swift
.strikethrough(true, color: .red)
```

- 밑줄 처리

```swift
.underline(true, color: .yellow)
```

- 기준선 오프셋

```swift
.baselineOffset(-10)
```

- 행간조절

```swift
.lineSpacing(10)
```

- 자간조절

Kerning, 커닝 (글자의 모양에 따라, 폰트에 따라 글자 사이의 간격이 다르게 변화)

```swift
.kerning(5)
```

Tracking, 트래킹 (글자의 모양과 상관없이 고정된 값)

```swift
.tracking(5)
```

SwiftUI에서는 1개의 Text View에 kerning, tracking 수식어사 동시에 있다면 tracking을 우선시하고, kerning을 무시한다. 특정 폰트에서는 kerning과 tracking의 결과가 같을 수 있다.

- 프레임 지정

```swift
.frame(width: 200, height: 50, alignment: .leading)
```

frame을 사용하여 Text의 공간을 정하고 줄 바꿈, 크기 조정 등을 통해 적합하게 화면을 구성할 수 있다.

- 줄수 제한

```swift
.lineLimit(3)
```

- 여러줄의 텍스트 정렬 방식

```swift
.multilineTextAlignment(.center)
```

- 텍스트의 문자 생략

```swift
.allowsTightening(true / false)
.truncationMode(.head / middle / .tail)
```

글이 너무 길어 frame에 맞게 문자를 생략할 수 있다.

.truncationMode를 사용하여 생략방식을 결정할 수 있다.

- 텍스트 다운스케일링의 양 제한

```swift
.minimumScaleFactor(0.5)
```