---
layout: post
title:  Optional
date:   2022-06-29 08:00:00 +0300
image:  '/images/post/optional/optional.png'
tags:   [SwiftUI, HIG, Development]
---
## Optional 옵셔널 - Unwrapping
지금까지 코드에서 <b style="color: Deeppink">?</b>이나 <b style="color: Deeppink">!</b>기호를 본적 있을건데 이런 기호들이 옵셔널 기호입니다.

> Optional: "선택적인" - 있어도 되고 없어도 되는 존재

Swift에서도 마찬가지로 옵셔널 값이 있을 수도, 없을 수도 있습니다.</br>
변수(var)나 상수(let)이 nil값일 수 있다는 뜻.

***
### 옵셔널을 왜 사용할까?
바로 예시를 보면
```swift
var number: Int
number = nil //nil cannot be assigned to type 'Int'
```
이렇게 nil값은 Int형 타입에 할당될 수 없다고 컴파일 에러가 납니다.

Swift는 기본적으로 변수를 선언할 때 non-optional, 즉 어떠한 '값'을 변수에 지정해 주어야 합니다.

위의 예시에서는 'number'라는 변수를 Int형으로 선언하여 무조건 정수 타입의 값이 들어가야 합니다. 하지만 <b style="color: DeepPink">nil</b>값이 들어갔습니다. 정수 타입이 아니여서 컴파일 에러가 나게 된거죠.

하지만 코딩을 하다보면 어떠한 변수에 값이 안 들어갈 수도 있습니다. 이때 옵셔널을 사용합니다. 위의 예시처럼 이렇게 변수 안에 값이 확실히 있다는 것을 보장할 수 없으면 Optional을 사용합니다.

Optional을 사용하기 위해서
```swift
var number: Int?
number = nil
```
위와 같이 <b style="color: DeepPink">?</b> 기호를 사용합니다. <b style="color: DeepPink">!</b> 도 마찬가지로 옵셔널 기호를 사용함으로써 이변수 안에 값이 있을 수도, 없을 수도 있다는 것을 표현을 하여 컴파일 에러가 나지 않습니다.

***

옵셔널이라는 타입의 정의로 이동해서 보면
```swift
@frozen public enum Optional<Wrapped> : ExpressibleByNilLiteral {
    case none
    case some(Wrapped)
}
.
.
.
```
이런 식으로 선언이 되어있는데, 여기서 우리는 옵셔널이 열거형이라는 것을 알 수 있습니다.
<b style="color: DeepPink">none</b>: nil값이 없다.</br>
<b style="color: DeepPink">some</b>(Wrapped): 값이 있다.</br>
또, 옵셔널이 열거형이기 때문에 switch구문을 이용해서 값이 있고 없음을 확인할 수 있습니다.

```swift	
func isOptional(value OptionalValue: Any?) {
    switch OptionalValue {
    case .none:
        print("이 옵셔널은 값이 없습니다.")
    case .some(let someValue):
        print("이 옵셔널의 값은 \(someValue) 입니다.")
    }
}

var name: String? = "Neis"
isOptional(value: name) // 이 옵셔널의 값은 Neis 입니다.

name = nil
isOptional(value: name) // 이 옵셔널은 값이 없습니다.
```

만약 여러 케이스의 조건을 통해 검사하고 싶으면 <b style="color: DeepPink">Where</b>을 사용하면 됩니다

```swift	
let numbers: [Int?] = [nil, 100, -10, nil, 6, 20]

for item in numbers {
    switch item {
    case .some(let someValue) where someValue > 50:
        print("큰 값: \(someValue)")
    case .some(let someValue) where someValue < 0:
        print("음수: \(someValue)")
    case .some(let someValue):
        print("양수: \(someValue)")
    case .none:
        print("값이 없습니다")
    }
}
```

그런데 고작 하나의 옵셔널을 가지고 이렇게 복잡하게 확인하는 방법은 비효율적입니다.

***

### 옵셔널 추출
일단 상자 하나를 떠올려 보면, 그동안 선언해 온 변수가 왼쪽의 경우라고 생각하면 되고, Optional 변수는 오른쪽 상자안에 값이 들어가 있다고 생각해 봅시다.

<center><img src="/images/post/optional/optional1.PNG" alt="Project"></center> <br/>

#### ?와 !의 차이점
* ?</br>
일단 옵셔널로 변수를 선언해 줬으니 Xcode는 상자 하나를 만듭니다.
만약 그곳에  <b style="color: DeepPink">?</b> 가 붙으면 Xcode는 상자에 '노크'를 하게 됩니다.

만약 상자안에 값이 있으면 '30이라는 값을 가지고 있어'하고 왼쪽처럼 30이라는 값을 얻게 됩니다.

하지만 상자를 열었는데 아무것도 없으면 <b style="color: DeepPink">nil</b>값을 반환해 주게 됩니다.

<center><img src="/images/post/optional/optional2.png" alt="Project"></center> <br/>

코드로 다시 확인해보면
```swift	
var someValue: Int? = 30
var value = someValue
```
Xcode는 <b style="color: DeepPink">someValue</b>뒤에 <b style="color: DeepPink">?</b>가 붙었기 때문에<br>
 '<b style="color: DeepPink">someValue</b>에 정수가 들어갈 수도 있지만 <b style="color: DeepPink">nil</b>이 들어갈 수도 있겠구나'라고 생각할 수 있습니다.

 그런데 <b style="color: DeepPink">value</b>라는 변수에 <b style="color: DeepPink">someValue</b>를 넣어주게 되어 value타입도 옵셔널 타입이 되었습니다.

 즉, var value = someValue의 의미는 value는 옵셔널 타입이고 Int타입의 데이터를 가질 수 있는 변수 입니다.

 만약 value에 타입을 명시해보면 어떻게 될까요?
 ```swift	
var someValue: Int? = 30
// Value of optional type 'Int?' must be unwrapped to a value of type 'Int'
var value: Int = someValue
```
이렇게 컴파일 에러가 나게 됩니다.

<b style="color: DeepPink">value</b>라는 변수에 타입을 명시하게 되면 '<b style="color: DeepPink">value</b>라는 변수는 <b style="color: DeepPink">Int</b>형 데이터밖에 가질 수 없어'라고 명시해줬다는 의미인 것 입니다. 그런데 거기에 <b style="color: DeepPink">someValue</b>라는 옵셔널 타입을 가지고 있는 변수를 지정해주니 당연히 오류가 나게된 것 입니다.

* !</br>
<b style="color: DeepPink">!</b>는 언래핑(<b style="color: DeepPink">Unwrapping</b>)이라고도 불립니다. 노크 따위 하지 않고 강제로 값을 꺼내버립니다. 상자에 값이 있던 말던 그냥 일단 값을 가지고 오겠다는 뜻입니다.

아까 사용했던 예시 코드를 다시 가져와 <b style="color: DeepPink">!</b> 를 붙여보면
```swift	
var someValue: Int? = 30
var value: Int! = someValue
```
이렇게 오류가 사라지게 됩니다. 왜냐하면 상자에서 강제로 값을 꺼냈기 때문입니다.

<b style="color: DeepPink">someValue</b>에 30이라는 값을 줬었고, <b style="color: DeepPink">value</b>상자에서 강제로 값을 꺼냈더니 운이 좋게 Int형 테이터 30이 들어있던거죠.

상자에서 강제로 값을 꺼내서 그 값을 value에 넣어준 코드이니 value입장에서는 아무문제가 없었던 것입니다. 

그런데 만약 상자에서 강제로 값을 꺼냈는데 값이 었다면?
```swift	
var someValue: Int? = nil
var value: Int = someValue!
//이렇게 컴파일 오류가 나지 않지만
print(value)
//error: Execution was interrupted, reason: EXC_BREAKPOINT (code=1, subcode=0x18f6dd21c).
```
이렇게 nil이라는 곳에 접근을 하려고 하면 오류가 납니다.

<b style="color: DeepPink">!</b>를 사용하여 값이 존재하지 않는 옵셔널 값에 접근 시도하면 런타임 에러가 발생합니다. 

따라서 <b style="color: DeepPink">!</b>를 사용하여 언래핑을 하기 전에는 항상 옵셔널 값이 nil값이 아니라는 것을 확실히 해야 합니다. <b style="color: DeepPink">nil</b>값이 아니라는 것이 확실하지 않은 상황에서 <b style="color: DeepPink">!</b>를 남용하게 되면 오류가 날 가능성이 높아집니다.

또한, <b style="color: DeepPink">!</b> 도 <b style="color: DeepPink">Optional</b>이기 때문에 초기화할 때 값을 요구하지 않습니다. 초기화를 안해주면 <b style="color: DeepPink">?</b>와 마찬가지로 <b style="color: DeepPink">nil</b> 값이 들어가게 됩니다.

***

### Optional 변수의 값을 가져오는 방법
이제 Optional 변수의 값을 가져올 차례입니다.

첫번째로 <b>옵셔널 바인딩(Optional Binding)</b>과 <b>옵셔널 체이닝(Optional Chaining)</b>이 있습니다. 그리고 강제 언래핑(ForcedUnwrapping) 즉 <b style="color: DeepPink">!</b>이 있습니다.

#### 옵셔널 바인딩 (Optional Binding)
옵셔널 바인딩은 If let(또는 If var)구문과 같이 사용합니다. 즉, 먼저 체크해준다 라고 생각하면 됩니다. 옵셔널에 값이 있는지 없는지 확인하고 값이 있으면 옵셔널이 아닌 형태로 바꿔주는 방식입니다.

<b style="color: DeepPink">nil</b>인지 아니면 값이 있는지의 경우에 따라 결과를 다르게 하고 싶으면 옵셔널 바인딩을 사용하면 됩니다.

```swift	
func printName(_name : String) {
   print(_name)
 }
 
var myName: String? = nil
//myName 상자에 값이 있으면 name에 myName을 넣어주고 조건을 실행해
if let name = myName {
   printName(_name: name)
 }
```
이렇게 실행하게 되면 아무것도 프린트 되지 않습니다. 그 이유는 myName이 nil이기 때문입니다.

<b style="color: DeepPink">if let</b>구문은 'myName상자에 값이 있으면 name에 myName을 넣어주고 조건을 실행해'라는 뜻입니다.

하지만 myName상자에는 nil이 있어서 if let 구문운 작동을 멈추고 print코드를 실행하지 않는 것입니다. 이렇게 값이 있을 때만 바인딩되기 때문에 <b>옵셔널 바인딩</b>이라고 부릅니다.

그렇기에 if let 구문을 통해 <b style="color: DeepPink">nil</b>인 경우와 아닌 경우를 안전하게 대비할 수 있습니다.

#### 옵셔널 체이닝 (Optional Chaining)
이름처럼 chain으로 이어져 있다고 생각하면 됩니다.

옵셔널 체이닝은 하위 프로퍼티에 옵셔널 값이 있는지 연속적으로 확인하면서, 중간에 하나라도 nil이 발견된다면 nil이 반환되는 형식입니다.

***