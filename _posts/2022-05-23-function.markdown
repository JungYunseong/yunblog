---
layout: post
title:  함수(Fuction)
date:   2022-05-23 08:00:00 +0000
image:  '/images/post/function/function.png'
tags:   [Swift, Grammar, Development]
---
함수는 특정 작업을 수행하는 <b>"코드조각"</b>입니다.

## 함수 선언의 기본형태
스위프트에서 함수를 정의하는 키워드는 func입니다.
```swift
func 함수 이름(매개변수1이름: 타입, 매개변수2이름: 타입 ...) -> 반환 타입 {
	실행 구문
    return 반환 값
}
```

***

## 매개변수 이름과 전달인자 레이블
* 매개변수: 함수를 정의할 때 <b>외부로부터 받아들이는 전달 값의 이름</b>을 의미합니다.
* 전달인자: 함수를 실제로 <b>호출할 때 전달하는 값</b>을 의미합니다. <br/>
함수를 정의할 때 매개변수 이름과 전달인자 레이블을 지정해줄 수 있습니다. 매개변수 이름과 전달인자 레이블을 같은 이름으로 사용할 수 있지만 전달인자 레이블을 별도로 지정해주면 함수 외부에서 매개변수의 역할을 좀 더 명확히 할 수 있습니다.

이를 사용한 함수의 기본형태는 아래와 같습니다.

```swift
func 함수 이름(전달인자 레이블 매개변수1이름: 매개변수1타입, 전달인자 레이블 매개변수2이름: 매개변수2타입 ...) -> 반환 타입 {
	실행 구문
    return 반환 값
}
```
```swift
func greet(from myName: String, to name: String) {
	print("Hello \(name)! I'm \(myName)!")
}
greet(from: "Neis", to: "Huckey") // Hello Huckey! I'm Neis!
}
```
<b style="color: #F06450">함수 내부에서 전달인자 레이블을 사용할 수 없으며, 함수를 호출할 때는 매개변수 이름을 사용할 수 없습니다!</b>
전달인자 레이블을 사용하고 싶지 않다면 '와일드카드 식별자( _ )'를 사용하면 됩니다. <br/><br/>
와일드카드 식별자( _ )를 사용하여 함수를 구현하면 아래와 같이 할 수 있습니다.

```swift
func greet(_ name: Sring, _ alreadyGreeted: Bool) -> String {
	if alreadyGreeted {
    	return "Hello again, " + name + "!"
    } else {
    	return "Hello, " + name + "!"
    }
 }
 
 print(greeting("Huckey", true)) // Hello again, Huckey!
```
여기서 전달인자 레이블을 변경하면 함수의 이름 자체가 변경됩니다. 따라서 전달인자 레이블만 다르게 써주면 함수 중복 정의(overload)로 동작할 수 있습니다.
<br/>

***

### 매개변수의 기본값
스위프트 함수에서는 매개변수마다 기본값을 지정해줄 수 있어 매개변수가 전달되지 않으면 기본값을 사용합니다.

```swift
// alreadyGreeted 매개변수가 기본값 false를 갖음
func greeting(_ name: Sring, _ alreadyGreeted: Bool = false) -> String {
	if alreadyGreeted {
    	return "Hello again, " + name + "!"
    } else {
    	return "Hello, " + name + "!"
    }
 }
 
 // alreadyGreeted 매개변수의 전달 값을 넘겨주지 않아 기본값 false를 반영해서 출력
 print(greeting("Everett")) // Hello, Everett!
 
 // alreadyGreeted 매개변수의 전달 값을 true로 넘겨주어서 그에 해당하는 값이 출력
 print(greeting("Nia", true)) // Hello again, Nia!
```
<b style="color: red">!</b> <b>기본값이 없는 매개변수를 기본값이 있는 매개변수 앞에 사용하는 것이 좋습니다.</b>

***

### 가변 매개변수
가변 매개변수는 매개변수로 <b>몇 개의 값이 들어올지 모를 때</b> 사용할 수 있습니다.
0개 이상(0개 포함)의 값을 받아올 수 있으며, 가변 매개변수로 들어온 인자 값은 배열처럼 사용할 수 있습니다.<br/>
단, 함수마다 가변 매개변수는 <b>하나만</b> 가질 수 있습니다.

```swift
func greetToFriends(me: String, friends names: String...) -> String {
	var result: String = ""
    
    for friend in names {
    	result += "Hello \(friend)!" + " "
    }
    
    result += "I'm" + me + "!"
    return result
}

print(greetToFriends(me: "Neis", friends: "Everett", "Nia", "Huckey", "Chikong"))
// Hello Everett! Hello Nia! Hello Huckey! Hello Chikong! I'm Neis!
}
```

***

### 반환이 없는 함수
반환 값이 없는 함수라면 반환 타입을 '없음'을 의미하는 *Void*로 표기하거나 아예 반환 타입 표현을 생략해줄 수 있습니다.
```swift
// 반환 타입 생략:
func myFunction() {
	print("Hello, World!")
}
myFunction() // Hello, World!

// 반환 타입 표시:
func myFunction() -> Void {
	print("Hello, World!")
}
myFunction() // Hello, World!
```
<br/>

### 반환이 있는 함수
```swift
func greet(name: String) -> String {
	let greeting = "Hello, " + name + "!"
    return greeting
}

let helloNeis: Sting = greet(name: "Neis")
print(helloNeis) // Hello, Neis!
```
이걸 좀 더 간단하게 표현하면
```swift
func greeting(name: String) -> String {
	return "Hello, \(name)!"
}

print(greeting(name: "Neis")) // Hello, Neis!
```
위와 같은 경우 함수 내부에 단 한 줄의 표현이고, 그 표현의 결과값이 반환 타입과 일치한다면 return 키워드를 생략해 줄 수 있습니다.
```swift
func greeting(name: String) -> String {
	"Hello, \(name)!"
}

print(greeting(name: "Neis")) // Hello, Neis!
```

***